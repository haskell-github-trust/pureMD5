name: build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    name: GHC ${{ matrix.ghc-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ghc-version: ['9.6.6']

    steps:
      - uses: actions/checkout@v4
        with:
          # 0 indicates all history for all branches and tags
          fetch-depth: 0

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: '3.14.1.1'
          cabal-update: true

      - name: Extract New-Versions git trailer from Renovate
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_HEAD_REF: "{{ github.head_ref }}"
        run: |
          if [ ! -f cabal.project ]
            then echo 'packages: .' > cabal.project
          fi
          for constraint in $(git log "--format=%(trailers:key=New-Versions,valueonly=true)" $GITHUB_HEAD_REF -1)
            do echo "constraints: $constraint" >> cabal.project
          done
          cat cabal.project

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

      - name: Check cabal file
        run: cabal check

      - name: Build documentation
        run:
          cabal haddock all --disable-documentation
          # --disable-documentation disables building documentation for dependencies.
          # The package's own documentation is still built,
          # yet contains no links to the documentation of the dependencies.
